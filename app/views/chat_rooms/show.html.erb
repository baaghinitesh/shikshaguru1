<div class="h-screen flex flex-col bg-gray-50">
  <!-- Chat Header -->
  <div class="bg-white border-b border-gray-200 px-6 py-4">
    <div class="flex items-center justify-between">
      <div class="flex items-center">
        <%= link_to chat_rooms_path, class: "mr-4 text-gray-500 hover:text-gray-700" do %>
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
          </svg>
        <% end %>
        
        <div>
          <h1 class="text-xl font-semibold text-gray-900"><%= @chat_room.name %></h1>
          <div class="flex items-center text-sm text-gray-600">
            <% @other_participants.each do |participant| %>
              <span class="mr-2"><%= participant.user.name %></span>
            <% end %>
            <span class="text-xs text-gray-400">
              â€¢ <%= pluralize(@chat_room.messages.count, 'message') %>
            </span>
          </div>
        </div>
      </div>
      
      <div class="flex items-center space-x-2">
        <% if @chat_room.is_active %>
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
            <span class="w-2 h-2 bg-green-400 rounded-full mr-1.5"></span>
            Active
          </span>
        <% end %>
        
        <% if @chat_room.job_request %>
          <%= link_to job_request_path(@chat_room.job_request), class: "text-blue-600 hover:text-blue-800 text-sm font-medium" do %>
            View Job Request
          <% end %>
        <% end %>
      </div>
    </div>
  </div>

  <!-- Messages Container -->
  <div id="messages-container" class="flex-1 overflow-y-auto p-6 space-y-4">
    <% if @messages.any? %>
      <% @messages.each do |message| %>
        <div class="message flex <%= 'justify-end' if message.user == current_user %>" data-message-id="<%= message.id %>">
          <div class="max-w-xs lg:max-w-md px-4 py-2 rounded-lg <%= message.user == current_user ? 'bg-blue-500 text-white' : 'bg-white border border-gray-200' %>">
            <% unless message.user == current_user %>
              <div class="text-xs font-medium text-gray-600 mb-1"><%= message.user.name %></div>
            <% end %>
            <div class="message-content"><%= simple_format(message.content) %></div>
            <div class="text-xs <%= message.user == current_user ? 'text-blue-100' : 'text-gray-500' %> mt-1">
              <%= message.created_at.strftime('%I:%M %p') %>
            </div>
          </div>
        </div>
      <% end %>
    <% else %>
      <div class="text-center py-8">
        <div class="text-gray-500 mb-4">
          <svg class="w-16 h-16 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
          </svg>
        </div>
        <h3 class="text-lg font-medium text-gray-900 mb-2">Start the conversation</h3>
        <p class="text-gray-600">Send your first message to get started!</p>
      </div>
    <% end %>
  </div>

  <!-- Message Input -->
  <div class="bg-white border-t border-gray-200 px-6 py-4">
    <%= form_with url: chat_room_messages_path(@chat_room), method: :post, local: false, id: "message-form", class: "flex items-end space-x-4" do |form| %>
      <div class="flex-1">
        <%= form.text_area :content, placeholder: "Type your message...", 
            class: "w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none", 
            rows: 1, id: "message-input" %>
      </div>
      
      <%= form.hidden_field :message_type, value: "text" %>
      
      <%= form.submit "Send", 
          class: "btn btn-primary px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50", 
          id: "send-button" %>
    <% end %>
  </div>
</div>

<%= content_for :javascript do %>
<script>
  // Action Cable setup
  const chatRoom = <%= @chat_room.id %>;
  const currentUserId = <%= current_user.id %>;
  
  // Subscribe to chat room channel
  const subscription = App.cable.subscriptions.create({
    channel: "ChatRoomChannel",
    room_id: chatRoom
  }, {
    connected() {
      console.log("Connected to chat room " + chatRoom);
    },
    
    disconnected() {
      console.log("Disconnected from chat room " + chatRoom);
    },
    
    received(data) {
      if (data.type === 'new_message') {
        appendMessage(data.message);
      } else if (data.type === 'message_read') {
        // Handle read receipts if needed
        console.log('Message read by user ' + data.user_id);
      }
    },
    
    speak(message, messageType = 'text') {
      this.perform('speak', {
        message: message,
        message_type: messageType
      });
    },
    
    markAsRead() {
      this.perform('mark_as_read', {});
    }
  });
  
  // Message handling
  function appendMessage(message) {
    const messagesContainer = document.getElementById('messages-container');
    const isCurrentUser = message.user_id === currentUserId;
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `message flex ${isCurrentUser ? 'justify-end' : ''}`;
    messageDiv.setAttribute('data-message-id', message.id);
    
    messageDiv.innerHTML = `
      <div class="max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${isCurrentUser ? 'bg-blue-500 text-white' : 'bg-white border border-gray-200'}">
        ${!isCurrentUser ? `<div class="text-xs font-medium text-gray-600 mb-1">${message.user_name}</div>` : ''}
        <div class="message-content">${message.content.replace(/\n/g, '<br>')}</div>
        <div class="text-xs ${isCurrentUser ? 'text-blue-100' : 'text-gray-500'} mt-1">
          ${message.created_at}
        </div>
      </div>
    `;
    
    messagesContainer.appendChild(messageDiv);
    scrollToBottom();
  }
  
  function scrollToBottom() {
    const messagesContainer = document.getElementById('messages-container');
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }
  
  // Form submission
  document.getElementById('message-form').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const messageInput = document.getElementById('message-input');
    const message = messageInput.value.trim();
    
    if (message === '') return;
    
    // Disable form temporarily
    const sendButton = document.getElementById('send-button');
    sendButton.disabled = true;
    messageInput.disabled = true;
    
    // Send via AJAX
    fetch(this.action, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
      },
      body: JSON.stringify({
        message: {
          content: message,
          message_type: 'text'
        }
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.status === 'success') {
        messageInput.value = '';
        // Message will be broadcasted via Action Cable
      } else {
        alert('Error sending message: ' + (data.errors ? data.errors.join(', ') : 'Unknown error'));
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('Error sending message');
    })
    .finally(() => {
      sendButton.disabled = false;
      messageInput.disabled = false;
      messageInput.focus();
    });
  });
  
  // Auto-resize textarea
  document.getElementById('message-input').addEventListener('input', function() {
    this.style.height = 'auto';
    this.style.height = (this.scrollHeight) + 'px';
  });
  
  // Handle Enter key (send message) and Shift+Enter (new line)
  document.getElementById('message-input').addEventListener('keydown', function(e) {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      document.getElementById('message-form').dispatchEvent(new Event('submit'));
    }
  });
  
  // Mark as read when user is viewing the chat
  subscription.markAsRead();
  
  // Auto-scroll to bottom on page load
  document.addEventListener('DOMContentLoaded', function() {
    scrollToBottom();
  });
</script>
<% end %>