<!-- Theme Modal -->
<div id="theme-modal" class="modal">
  <div class="modal-box w-11/12 max-w-2xl">
    <h2 class="font-bold text-2xl mb-6 flex items-center">
      <span class="mr-2">ðŸŽ¨</span>
      Customize Theme
    </h2>
    
    <!-- Theme Selection -->
    <div class="mb-8">
      <h3 class="text-lg font-semibold mb-4">Choose Theme</h3>
      <div class="grid grid-cols-2 md:grid-cols-4 gap-3">
        <% available_themes.each do |key, theme| %>
          <div class="theme-option cursor-pointer p-3 rounded-lg border-2 transition-all hover:shadow-md"
               data-theme-key="<%= key %>"
               data-theme="<%= theme[:data_theme] %>"
               onclick="previewTheme('<%= key %>')">
            <div class="text-center">
              <div class="text-2xl mb-2"><%= theme_icon(key) %></div>
              <div class="font-medium text-sm"><%= theme[:name] %></div>
              <div class="text-xs text-gray-500 mt-1"><%= theme[:description] %></div>
            </div>
          </div>
        <% end %>
      </div>
    </div>

    <!-- Accent Color Selection -->
    <div class="mb-8">
      <h3 class="text-lg font-semibold mb-4">Choose Accent Color</h3>
      <div class="grid grid-cols-3 md:grid-cols-6 gap-3">
        <% available_accent_colors.each do |key, color| %>
          <div class="accent-option cursor-pointer p-3 rounded-lg border-2 transition-all hover:shadow-md flex flex-col items-center"
               data-accent-key="<%= key %>"
               onclick="previewAccentColor('<%= key %>')">
            <div class="w-8 h-8 rounded-full mb-2" style="background-color: <%= color[:primary] %>"></div>
            <div class="font-medium text-xs text-center"><%= color[:name] %></div>
          </div>
        <% end %>
      </div>
    </div>

    <!-- Preview Section -->
    <div class="mb-6 p-4 rounded-lg border-2 border-dashed border-gray-300">
      <h4 class="font-semibold mb-3">Preview</h4>
      <div class="space-y-3">
        <div class="flex space-x-2">
          <button class="btn btn-primary btn-sm">Primary Button</button>
          <button class="btn btn-secondary btn-sm">Secondary Button</button>
          <button class="btn btn-accent btn-sm">Accent Button</button>
        </div>
        <div class="card bg-base-100 shadow-lg">
          <div class="card-body p-4">
            <h2 class="card-title text-primary">Sample Card</h2>
            <p class="text-base-content">This is how your content will look with the selected theme.</p>
            <div class="badge badge-primary">Primary Badge</div>
          </div>
        </div>
      </div>
    </div>

    <!-- Action Buttons -->
    <div class="modal-action">
      <button class="btn btn-ghost" onclick="resetThemePreview()">Reset to Default</button>
      <button class="btn btn-secondary" onclick="closeThemeModal()">Cancel</button>
      <button class="btn btn-primary" onclick="applyTheme()" id="apply-theme-btn">Apply Theme</button>
    </div>
  </div>
  
  <!-- Modal backdrop -->
  <form method="dialog" class="modal-backdrop">
    <button>close</button>
  </form>
</div>

<!-- Theme JavaScript -->
<script>
let currentPreviewTheme = '<%= current_theme %>';
let currentPreviewAccent = '<%= current_accent_color %>';
let originalTheme = '<%= current_theme %>';
let originalAccent = '<%= current_accent_color %>';

function openThemeModal() {
  document.getElementById('theme-modal').showModal();
  updateThemeSelection();
  updateAccentSelection();
}

function closeThemeModal() {
  document.getElementById('theme-modal').close();
  // Reset preview to original
  resetThemePreview();
}

function updateThemeSelection() {
  document.querySelectorAll('.theme-option').forEach(option => {
    const key = option.dataset.themeKey;
    if (key === currentPreviewTheme) {
      option.classList.add('border-primary', 'bg-primary/10');
    } else {
      option.classList.remove('border-primary', 'bg-primary/10');
      option.classList.add('border-gray-300');
    }
  });
}

function updateAccentSelection() {
  document.querySelectorAll('.accent-option').forEach(option => {
    const key = option.dataset.accentKey;
    if (key === currentPreviewAccent) {
      option.classList.add('border-primary', 'bg-primary/10');
    } else {
      option.classList.remove('border-primary', 'bg-primary/10');
      option.classList.add('border-gray-300');
    }
  });
}

function previewTheme(themeKey) {
  currentPreviewTheme = themeKey;
  const themeData = document.querySelector(`[data-theme-key="${themeKey}"]`).dataset.theme;
  document.body.setAttribute('data-theme', themeData);
  updateThemeSelection();
  updateCustomCSS();
}

function previewAccentColor(colorKey) {
  currentPreviewAccent = colorKey;
  updateAccentSelection();
  updateCustomCSS();
}

function updateCustomCSS() {
  // Make AJAX call to get updated CSS
  fetch('/theme', {
    method: 'PATCH',
    headers: {
      'Content-Type': 'application/json',
      'X-Requested-With': 'XMLHttpRequest',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
    },
    body: JSON.stringify({
      theme: currentPreviewTheme,
      accent_color: currentPreviewAccent,
      preview_only: true
    })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      const customCSSElement = document.getElementById('custom-theme-css');
      if (customCSSElement) {
        customCSSElement.innerHTML = data.custom_css;
      }
    }
  })
  .catch(error => {
    console.error('Error updating theme preview:', error);
  });
}

function resetThemePreview() {
  currentPreviewTheme = originalTheme;
  currentPreviewAccent = originalAccent;
  
  // Reset to original theme
  const originalThemeData = document.querySelector(`[data-theme-key="${originalTheme}"]`)?.dataset.theme || 'light';
  document.body.setAttribute('data-theme', originalThemeData);
  
  updateThemeSelection();
  updateAccentSelection();
  updateCustomCSS();
}

function applyTheme() {
  const applyButton = document.getElementById('apply-theme-btn');
  applyButton.disabled = true;
  applyButton.textContent = 'Applying...';
  
  fetch('/theme', {
    method: 'PATCH',
    headers: {
      'Content-Type': 'application/json',
      'X-Requested-With': 'XMLHttpRequest',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
    },
    body: JSON.stringify({
      theme: currentPreviewTheme,
      accent_color: currentPreviewAccent
    })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      originalTheme = currentPreviewTheme;
      originalAccent = currentPreviewAccent;
      
      // Show success message
      showNotification('Theme updated successfully!', 'success');
      closeThemeModal();
    } else {
      showNotification(data.message || 'Failed to update theme', 'error');
    }
  })
  .catch(error => {
    console.error('Error applying theme:', error);
    showNotification('Failed to update theme', 'error');
  })
  .finally(() => {
    applyButton.disabled = false;
    applyButton.textContent = 'Apply Theme';
  });
}

function showNotification(message, type = 'info') {
  // Create a simple notification
  const notification = document.createElement('div');
  notification.className = `alert alert-${type} fixed top-4 right-4 max-w-sm z-50 shadow-lg`;
  notification.innerHTML = `
    <div class="flex items-center">
      <span>${message}</span>
      <button onclick="this.parentElement.parentElement.remove()" class="btn btn-sm btn-circle btn-ghost ml-2">âœ•</button>
    </div>
  `;
  
  document.body.appendChild(notification);
  
  // Auto-remove after 3 seconds
  setTimeout(() => {
    if (notification.parentElement) {
      notification.remove();
    }
  }, 3000);
}

// Initialize theme selection on page load
document.addEventListener('DOMContentLoaded', function() {
  updateThemeSelection();
  updateAccentSelection();
});
</script>